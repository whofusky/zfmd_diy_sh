#!/bin/bash
#
#      File: functions
# Create on: 2019-01-08
#    Author: Sunjianjun/QQ37489753/WeChat:fatsunabc/Email:sunsjj@126.com
#  Function: Firewall functions library.
#   Version: 1.0
# Revision History:
#   2019-01-08    Created by SunJianjun.
#   2019-05-14    Modify by fushikai
#

baseDir=$(dirname $0)
cfgFile="${baseDir}/network.conf"

if [ ! -e ${cfgFile} ];then
    echo -e "\n\tError: File [ ${cfgFile} ] does not exist!!\n"
    exit 1
fi


. ${cfgFile}




# 
function ECHO_DO()
{
    cmd="$*"
    echo "[$USER@$HOSTNAME $PWD] $cmd"
    if [[ -z "${debugFlag}" || ${debugFlag} -ne 1 ]];then
        $cmd
    fi
    return 0
}

function FW_START()
{
  ECHO_DO chkconfig iptables on
  ECHO_DO service iptables start
}

function FW_STOP()
{
  ECHO_DO service iptables stop
  ECHO_DO chkconfig iptables off
}

function FW_SAVE()
{
  ECHO_DO /etc/rc.d/init.d/iptables save
  ECHO_DO service iptables restart
}

function FW_VIEW()
{
  ECHO_DO iptables -L -n -v
}

function FW_CLEAR()
{
  ECHO_DO iptables -t filter -F
  ECHO_DO iptables -t filter -X
  ECHO_DO iptables -t mangle -F
  ECHO_DO iptables -t mangle -X
  ECHO_DO iptables -t nat -F
  ECHO_DO iptables -t nat -X
  ECHO_DO iptables -P INPUT DROP
  ECHO_DO iptables -P OUTPUT DROP
  ECHO_DO iptables -P FORWARD ACCEPT
}

function FW_LO()
{
  ECHO_DO iptables -A INPUT -i lo -p all -j ACCEPT
  ECHO_DO iptables -A OUTPUT -o lo -p all -j ACCEPT
}

function FW_PING()
{
  ECHO_DO iptables -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT
  ECHO_DO iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
  ECHO_DO iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
  ECHO_DO iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT
}

function FW_INIT()
{
  FW_START
  FW_CLEAR
  FW_LO
  FW_PING
}

function FW_FTP_CLIENT_20() #usege: FW_FTP_CLIENT_20 $local_IP $remote_IP / FW_FTP_CLIENT_20 $remote_IP
{
    local local_ip
    local server_ip

    if [ $# -eq 2 ];then
        local_ip=$1
        server_ip=$2
    else
        server_ip=$1
    fi

    if [ -z "${local_ip}" ];then

        ECHO_DO iptables -A OUTPUT -d ${server_ip}  -p tcp --dport 20 -m state --state ESTABLISHED -j ACCEPT
        ECHO_DO iptables -A INPUT -s ${server_ip}  -p tcp  --sport 20 -m state --state NEW,ESTABLISHED -j ACCEPT

    else
        ECHO_DO iptables -A OUTPUT -d ${server_ip} -s ${local_ip} -p tcp --dport 20 -m state --state ESTABLISHED -j ACCEPT
        ECHO_DO iptables -A INPUT -s ${server_ip} -d ${local_ip} -p tcp  --sport 20 -m state --state NEW,ESTABLISHED -j ACCEPT
    fi


    return 0

}

function FW_FTP_CLIENT_21() #usege: FW_FTP_CLIENT_21 $local_IP $remote_IP / FW_FTP_CLIENT_21 $remote_IP
{
    local local_ip
    local server_ip

    if [ $# -eq 2 ];then
        local_ip=$1
        server_ip=$2
    else
        server_ip=$1
    fi

    if [ -z "${local_ip}" ];then

        ECHO_DO iptables -A OUTPUT -d ${server_ip}  -p tcp --dport 21 -m state --state NEW,ESTABLISHED -j ACCEPT
        ECHO_DO iptables -A INPUT -s ${server_ip}  -p tcp  --sport 21 -m state --state ESTABLISHED -j ACCEPT

    else
        ECHO_DO iptables -A OUTPUT -d ${server_ip} -s ${local_ip} -p tcp --dport 21 -m state --state NEW,ESTABLISHED -j ACCEPT
        ECHO_DO iptables -A INPUT -s ${server_ip} -d ${local_ip} -p tcp  --sport 21 -m state --state ESTABLISHED -j ACCEPT
    fi

    return 0

}

# get_fw_CorS_str(server_opFlag,op_protocol,local_ip:port, remote_ip:port )
# get_fw_CorS_str(0,op_protocol, remote_ip:port )
# get_fw_CorS_str(1,op_protocol,local_ip:port )
function get_fw_CorS_str()
{
    if [[ $# -ne 3 && $# -ne 4 ]];then
        echo -e "\n\tError:get_fw_CorS_str input parameter number not eq 3 or 4\n"
        return 1
    fi 


    local server_opFlag=$1  #1:server,other:client
    local op_protocol=$2    #tcp or udp

    local tcheck=$(echo "${server_opFlag}"|sed -n "/^[1-9][0-9]*$/p"|wc -l)
    [ ${tcheck} -eq 0 ] && server_opFlag=0

    [ ${op_protocol} != "udp" ] && op_protocol="tcp"


    local localAddr
    local remoteAddr
    local local_ip
    local local_port
    local remote_ip
    local remote_port

    if [ $# -eq 4 ];then
        localAddr="$3"
        remoteAddr="$4"
    else
        if [ ${server_opFlag} -ne 1 ];then
            #client
            remoteAddr="$3"
        else
            #server
            localAddr="$3"

        fi
    fi

    
    if [ ! -z "${localAddr}" ];then
        local_ip=$(echo "${localAddr}"|awk -F':' '{print $1}')
        local_port=$(echo "${localAddr}"|awk -F':' '{print $2}')
        if [ ! -z "${local_port}" ];then
            local_port=$(echo ${local_port}|tr '-' ':')
        fi
    fi


    if [ ! -z "${remoteAddr}" ];then
        remote_ip=$(echo "${remoteAddr}"|awk -F':' '{print $1}')
        remote_port=$(echo "${remoteAddr}"|awk -F':' '{print $2}')
        if [ ! -z "${remote_port}" ];then
            remote_port=$(echo ${remote_port}|tr '-' ':')
        fi
    fi

    #echo "------local_ip=[${local_ip}],local_port=[${local_port}],remote_ip=[${remote_ip}],remote_port=[${remote_port}]-------"
    #return 0

    if [[ -z "${local_ip}" && -z "${remote_ip}" && -z "${local_port}" && -z "${remote_port}" ]];then
    
        echo "Error: in function get_fw_CorS_str local_ip,remote_ip,local_port,remote_port, all null"
        return 2
    fi


    if [ ! -z "${local_ip}" ];then
        local tLocalIpStrOut="-s ${local_ip}"
        local tLocalIpStrIn="-d ${local_ip}"
    fi 
    if [ ! -z "${remote_ip}" ];then
        local tRemoteIpStrOut="-d ${remote_ip}"
        local tRemoteIpStrIn="-s ${remote_ip}"
    fi 
    if [ ! -z "${local_port}" ];then
        local tLocalPtStrOut="--sport ${local_port}"
        local tLocalPtStrIn="--dport ${local_port}"
    fi
    if [ ! -z "${remote_port}" ];then
        local tRemotePtStrOut="--dport ${remote_port}"
        local tRemotePtStrIn="--sport ${remote_port}"
    fi

    if [ ${server_opFlag} -ne 1 ];then
        #client
        local tOutState="-m state --state NEW,ESTABLISHED"
        local tInState="-m state --state ESTABLISHED"
    else
        #server
        local tOutState="-m state --state ESTABLISHED"
        local tInState="-m state --state NEW,ESTABLISHED"
    fi

    local tOUTPUT="iptables -A OUTPUT ${tRemoteIpStrOut} ${tLocalIpStrOut} -p ${op_protocol} ${tRemotePtStrOut} ${tLocalPtStrOut} ${tOutState} -j ACCEPT"
    local tINPUT="iptables -A INPUT ${tRemoteIpStrIn} ${tLocalIpStrIn} -p ${op_protocol} ${tRemotePtStrIn} ${tLocalPtStrIn} ${tInState} -j ACCEPT"

    echo "${tOUTPUT}|${tINPUT}"

    return 0

}

# new_FW_TCP_OUTw(local_ip:port, remote_ip:port ), Port number optional
function new_FW_TCP_OUT()
{
    if [[ $# -ne 1 && $# -ne 2 ]];then
        echo -e "\n\tError:new_FW_TCP_OUT input parameter number not eq 1 or 2\n"
        return 1
    fi 
    if [ $# -eq 2 ];then
        localAddr="$1"
        remoteAddr="$2"
    else
        remoteAddr="$1"
    fi
    
    if [ ! -z "${localAddr}" ];then
        local_ip=$(echo "${localAddr}"|awk -F':' '{print $1}')
        local_port=$(echo "${localAddr}"|awk -F':' '{print $2}')
        if [ ! -z "${local_port}" ];then
            local_port=$(echo ${local_port}|tr '-' ':')
        fi
    fi
    remote_ip=$(echo "${remoteAddr}"|awk -F':' '{print $1}')
    remote_port=$(echo "${remoteAddr}"|awk -F':' '{print $2}')
    if [ ! -z "${remote_port}" ];then
        remote_port=$(echo ${remote_port}|tr '-' ':')
    fi

    #echo "------local_ip=[${local_ip}],local_port=[${local_port}],remote_ip=[${remote_ip}],remote_port=[${remote_port}]-------"
    #return 0


    if [ ! -z "${remote_ip}" ];then
    
        echo "Error: in function new_FW_TCP_OUT remote_ip is null"
        return 2
    else
        tRemoteIpStrOut="-d ${remote_ip}"
        tRemoteIpStrIn="-s ${remote_ip}"
    fi 
    if [ ! -z "${local_ip}" ];then
        tLocalIpStrOut="-s ${local_ip}"
        tLocalIpStrIn="-d ${local_ip}"
    fi 
    if [ ! -z "${local_port}" ];then
        tLocalPtStrOut="--sport ${local_port}"
        tLocalPtStrIn="--dport ${local_port}"
    fi
    if [ ! -z "${remote_port}" ];then
        tRemotePtStrOut="--dport ${remote_port}"
        tRemotePtStrIn="--sport ${remote_port}"
    fi

    ECHO_DO iptables -A OUTPUT ${tRemoteIpStrOut} ${tLocalIpStrOut} -p tcp ${tRemotePtStrOut} ${tLocalPtStrOut} -m state --state NEW,ESTABLISHED -j ACCEPT
    ECHO_DO iptables -A INPUT ${tRemoteIpStrIn} ${tLocalIpStrIn} -p tcp ${tRemotePtStrIn} ${tLocalPtStrIn} -m state --state ESTABLISHED -j ACCEPT

    return 0

}

# FW_TCP_OUT(local_ip, remote_ip, remote_port)
function FW_TCP_OUT()
{
  ECHO_DO iptables -A OUTPUT -d $2 -s $1 -p tcp --dport $3 -m state --state NEW,ESTABLISHED -j ACCEPT
  ECHO_DO iptables -A INPUT -s $2 -d $1 -p tcp --sport $3 -m state --state ESTABLISHED -j ACCEPT
}

# FW_TCP_OUT_R(remote_ip, remote_port)
function FW_TCP_OUT_R()
{
  ECHO_DO iptables -A OUTPUT -d $1 -p tcp --dport $2 -m state --state NEW,ESTABLISHED -j ACCEPT
  ECHO_DO iptables -A INPUT -s $1 -p tcp --sport $2 -m state --state ESTABLISHED -j ACCEPT
}

# FW_TCP_IN(local_ip, local_port, remote_ip)
function FW_TCP_IN()
{
  ECHO_DO "iptables -A INPUT -s $3 -d $1 -p tcp --dport $2 -m state --state NEW,ESTABLISHED -j ACCEPT"
  ECHO_DO "iptables -A OUTPUT -d $3 -s $1 -p tcp --sport $2 -m state --state ESTABLISHED -j ACCEPT"
}

# FW_TCP_IN_P(local_port)
function FW_TCP_IN_P()
{
  ECHO_DO "iptables -A INPUT -p tcp --dport $1 -m state --state NEW,ESTABLISHED -j ACCEPT"
  ECHO_DO "iptables -A OUTPUT -p tcp --sport $1 -m state --state ESTABLISHED -j ACCEPT"
}

# FW_TCP_EACHOTHER(local_ip, remote_ip, port)
function FW_TCP_EACHOTHER()
{
  ECHO_DO "iptables -A INPUT -s $2 -d $1 -p tcp --sport $3 --dport $3 -m state --state NEW,ESTABLISHED -j ACCEPT"
  ECHO_DO "iptables -A OUTPUT -d $2 -s $1 -p tcp --sport $3 --dport $3 -m state --state NEW,ESTABLISHED -j ACCEPT"
}

# FW_UDP_OUT(local_ip, remote_ip)
function FW_UDP_OUT()
{
  ECHO_DO "iptables -A OUTPUT -d $2 -s $1 -p udp -j ACCEPT"
}

# FW_UDP_NTP()
function FW_UDP_NTP()
{
  ECHO_DO "iptables -A OUTPUT -p udp --dport 123 -j ACCEPT"
  ECHO_DO "iptables -A INPUT -p udp --sport 123 -j ACCEPT"
}

# FW_NIC_IN(nic)
function FW_NIC_IN()
{
  ECHO_DO iptables -A INPUT -i $1 -p all -m state --state NEW,ESTABLISHED -j ACCEPT
  ECHO_DO iptables -A OUTPUT -o $1 -p all -m state --state ESTABLISHED -j ACCEPT
}

# FW_NIC_OUT(nic)
function FW_NIC_OUT()
{
  ECHO_DO iptables -A OUTPUT -o $1 -p all -m state --state NEW,ESTABLISHED -j ACCEPT
  ECHO_DO iptables -A INPUT -i $1 -p all -m state --state ESTABLISHED -j ACCEPT
}
