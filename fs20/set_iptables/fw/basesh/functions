#!/bin/bash
#
#      File: functions
# Create on: 2019-01-08
#    Author: Sunjianjun/QQ37489753/WeChat:fatsunabc/Email:sunsjj@126.com
#  Function: Firewall functions library.
#   Version: 1.0
# Revision History:
#   2019-01-08    Created by SunJianjun.
#   2019-05-14    Modify by fushikai
#

#echo "$PWD"

[ -z "${funcBaseDir}" ] && funcBaseDir=$(dirname $0)
cfgFile="${funcBaseDir}/../cfg/network.conf"


if [ ! -e ${cfgFile} ];then
    echo -e "\n\t\e[1;31mError:in [$0]\e[0m File [ ${cfgFile} ] does not exist!!\n"
    exit 1
fi
. ${cfgFile}



function convertVLineToSpace() #Convert vertical lines to spaces
{

    if [ $# -lt 1 ];then
        echo ""
        return 0
    fi

    echo $(echo "$1"|tr -d "[\040\t\r\n]"|tr -s "|" "\040")
    return 0
}



function findNICbyIP()
{
    if [ $# -ne 1 ];then
        echo "Error:function findNICbyIP input parameter numbers not eq 1"
        return 1
    fi

    local tIp="$1"
    local tfname=$(ip route|grep -w "${tIp}"|awk '{print $3}')
    if [ ! -z "${tfname}" ];then
        echo "${tfname}"
        return 0
    fi

    local tdDir="/etc/sysconfig/network-scripts"

    local tnum=$(find ${tdDir} -name "ifcfg-*" -print|wc -l)
    if [ ${tnum} -lt 1 ];then
        echo ""
        return 0
    fi

    for tnaa in $(find ${tdDir} -name "ifcfg-*" -print)
    do
        tnum=$(egrep "^IPADDR[0-9]*\s*=\s*${tIp}\s*$" ${tnaa}|wc -l)
        if [ ${tnum} -gt 0 ];then
            tfname=$(echo "${tnaa}"|awk -F'/' '{print $NF}')
            tfname=${tfname#*-}
            break
        fi
    done
    
    #echo "tfname=[${tfname}]"
    echo "${tfname}"
    return 0

}


# 
function ECHO_DO()
{
    local cmd="$*"
    echo "[$USER@$HOSTNAME $PWD] ${cmd}"
    if [[ -z "${debugFlag}" || ${debugFlag} -ne 1 ]];then
        ${cmd}
    fi
    return 0
}

function FW_START()
{
  ECHO_DO chkconfig iptables on
  ECHO_DO service iptables start
}

function FW_STOP()
{
  ECHO_DO service iptables stop
  ECHO_DO chkconfig iptables off
}

function FW_SAVE()
{
  ECHO_DO /etc/rc.d/init.d/iptables save
  ECHO_DO service iptables restart
}

function FW_VIEW()
{
  ECHO_DO iptables -L -n -v
}

function FW_CLEAR()
{
  ECHO_DO iptables -t filter -F
  ECHO_DO iptables -t filter -X
  ECHO_DO iptables -t mangle -F
  ECHO_DO iptables -t mangle -X
  ECHO_DO iptables -t nat -F
  ECHO_DO iptables -t nat -X
  ECHO_DO iptables -P INPUT DROP
  ECHO_DO iptables -P OUTPUT DROP
  ECHO_DO iptables -P FORWARD ACCEPT
}

function FW_LO()
{
  ECHO_DO iptables -A INPUT -i lo -p all -j ACCEPT
  ECHO_DO iptables -A OUTPUT -o lo -p all -j ACCEPT
}

function FW_PING()
{
  ECHO_DO iptables -A INPUT -p icmp --icmp-type echo-reply -j ACCEPT
  ECHO_DO iptables -A OUTPUT -p icmp --icmp-type echo-request -j ACCEPT
  ECHO_DO iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
  ECHO_DO iptables -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT
}

function FW_INIT()
{
    FW_START
    FW_CLEAR
    FW_LO
    if [[ -z "${enablePing}" || ${enablePing} -eq 1 ]];then
        FW_PING
    fi
}



#--------------------------------------------------------------------------------
# new_fw_onerule_op( outPrtFlag, server_opFlag, op_protocol, NIC_name, local_ip:port, remote_ip:port )
#----------------------------------------------------------------------
# input:
#-------
#   outPrtFlag:        0:OUTPUT,INPUT; 1:OUTPUT; 2:INPUT 
#   server_opFlag      0:client; 1:server; 2:client,server; 3:stat null
#   op_protocol        tcp,upd,all
#   NIC_name           Network card name
#   local_Addr         local_ip:loca_port
#   remote_addr        remote_ip:remote_port
#----------------------------------------------------------------------
# output:
#-------
#   error msg OR null
#----------------------------------------------------------------------
# return:
#-------
#          0:      success
#      other:      error
# 
#--------------------------------------------------------------------------------

function new_fw_onerule_op()
{

    local cfgInPutNums=6
    if [[ $# -ne ${cfgInPutNums} ]];then
        echo -e "\n\tError:new_fw_onerule_op input parameter number not eq ${cfgInPutNums}\n"
        return 1
    fi 

    local outPrtFlag="$1" #0:OUTPUT INPUT;1:OUTPUT;2:INPUT
    local tcheck=$(echo "${outPrtFlag}"|sed -n "/^[0-9][0-9]*$/p"|wc -l)
    [ ${tcheck} -eq 0 ] && outPrtFlag=0

    shift


    local server_opFlag="$1"  #1:server,0:client,2:other
    local op_protocol="$2"    #tcp or udp

    local tNICname="$3"

    tcheck=$(echo "${server_opFlag}"|sed -n "/^[0-9][0-9]*$/p"|wc -l)
    [ ${tcheck} -eq 0 ] && server_opFlag=0

    if [[ ${op_protocol} != "udp" && ${op_protocol} != "all" ]];then
        op_protocol="tcp"
    fi  


    local localAddr
    local remoteAddr
    local local_ip
    local local_port
    local remote_ip
    local remote_port

    localAddr="$4"
    remoteAddr="$5"
    
    #if [ $# -eq 5 ];then
    #    localAddr="$4"
    #    remoteAddr="$5"
    #else
    #    if [ ${outPrtFlag} -eq 1 ];then
    #        #client
    #        remoteAddr="$4"
    #    else
    #        #server
    #        localAddr="$5"

    #    fi
    #fi

    
    #Parsing localAddr
    if [ ! -z "${localAddr}" ];then
        local_ip=$(echo "${localAddr}"|awk -F':' '{print $1}')
        local_port=$(echo "${localAddr}"|awk -F':' '{print $2}')
        if [ ! -z "${local_port}" ];then
            local_port=$(echo ${local_port}|tr '-' ':')
        fi
    fi


    #Parsing remoteAddr
    if [ ! -z "${remoteAddr}" ];then
        remote_ip=$(echo "${remoteAddr}"|awk -F':' '{print $1}')
        remote_port=$(echo "${remoteAddr}"|awk -F':' '{print $2}')
        if [ ! -z "${remote_port}" ];then
            remote_port=$(echo ${remote_port}|tr '-' ':')
        fi
    fi


    #Function entry limit
    if [[ -z "${local_ip}" && -z "${remote_ip}" && -z "${local_port}" && -z "${remote_port}" &&  -z "${tNICname}" ]];then
    
        echo "Error: in function new_fw_onerule_op local_ip,remote_ip,local_port,remote_port, tNICname all null"
        return 2
    fi


    #Assembling NIC string 
    local tNICStrOut
    local tNICStrIn    
    if [ ! -z "${tNICname}" ];then
        tNICStrOut="-o ${tNICname}"
        tNICStrIn="-i ${tNICname}"
    fi

    #Assembling local_ip string 
    if [ ! -z "${local_ip}" ];then
        local tLocalIpStrOut="-s ${local_ip}"
        local tLocalIpStrIn="-d ${local_ip}"
        if [[ ! -z "${bindNICByIP}" && ${bindNICByIP} -eq 1 && -z "${tNICname}" ]];then
            tNICname=$(findNICbyIP "${local_ip}")
            [ $? -ne 0 ] && tNICname=""
            if [ ! -z "${tNICname}" ];then
                tNICStrOut="-o ${tNICname}"
                tNICStrIn="-i ${tNICname}"
            fi
        fi
    fi 


    #Assembling local_port string 
    if [ ! -z "${local_port}" ];then
        local tLocalPtStrOut="--sport ${local_port}"
        local tLocalPtStrIn="--dport ${local_port}"
    fi

    #Assembling remote_ip string 
    if [ ! -z "${remote_ip}" ];then
        local tRemoteIpStrOut="-d ${remote_ip}"
        local tRemoteIpStrIn="-s ${remote_ip}"
    fi 
    #Assembling remote_port string 
    if [ ! -z "${remote_port}" ];then
        local tRemotePtStrOut="--dport ${remote_port}"
        local tRemotePtStrIn="--sport ${remote_port}"
    fi


    #Assembling state string 
    if [ ${server_opFlag} -eq 1 ];then
        #server
        local tOutState="-m state --state ESTABLISHED"
        local tInState="-m state --state NEW,ESTABLISHED"
    elif [ ${server_opFlag} -eq 2 ];then
        #other
        local tOutState="-m state --state NEW,ESTABLISHED"
        local tInState="-m state --state NEW,ESTABLISHED"
    elif [ ${server_opFlag} -eq 3 ];then
        #other
        local tOutState=""
        local tInState=""
    else
        #client
        local tOutState="-m state --state NEW,ESTABLISHED"
        local tInState="-m state --state ESTABLISHED"
    fi

    local tCommaFlagR=$(echo "${tRemotePtStrOut}"|sed -n '/,/p'|wc -l)
    local tCommaFlagL=$(echo "${tRemotePtStrOut}"|sed -n '/,/p'|wc -l)
    if [[ ${tCommaFlagR} -gt 0 || ${tCommaFlagL} -gt 0 ]];then
        local tStrMpt="-m multiport"
    fi


    local tOUTPUT="iptables -A OUTPUT ${tRemoteIpStrOut} ${tLocalIpStrOut} ${tNICStrOut} -p ${op_protocol} ${tStrMpt} ${tRemotePtStrOut} ${tLocalPtStrOut} ${tOutState} -j ACCEPT"
    local tINPUT="iptables -A INPUT ${tRemoteIpStrIn} ${tLocalIpStrIn} ${tNICStrIn} -p ${op_protocol} ${tStrMpt} ${tRemotePtStrIn} ${tLocalPtStrIn} ${tInState} -j ACCEPT"
    
    #Assembling OUTPUT INPUT
    if [ ${outPrtFlag} -eq 1 ];then
        #echo "${tOUTPUT}|"
        ECHO_DO "${tOUTPUT}"
    elif [ ${outPrtFlag} -eq 2 ];then
        #echo "|${tINPUT}"
        ECHO_DO "${tINPUT}"
    else
        #echo "${tOUTPUT}|${tINPUT}"
        ECHO_DO "${tOUTPUT}"
        ECHO_DO "${tINPUT}"
    fi


    return 0

}


